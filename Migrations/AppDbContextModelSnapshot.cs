// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.src.Infrastructure.Data;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.11");

            modelBuilder.Entity("ActivityModelUserModel", b =>
                {
                    b.Property<Guid>("SelectedActivitiesId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("TEXT");

                    b.HasKey("SelectedActivitiesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ActivityModelUserModel");
                });

            modelBuilder.Entity("FundModelFundSubgroupsModel", b =>
                {
                    b.Property<Guid>("FundSubgroupsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FundsId")
                        .HasColumnType("TEXT");

                    b.HasKey("FundSubgroupsId", "FundsId");

                    b.HasIndex("FundsId");

                    b.ToTable("FundModelFundSubgroupsModel");
                });

            modelBuilder.Entity("FundModelUserModel", b =>
                {
                    b.Property<Guid>("BenefactorsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EndowmentFundsId")
                        .HasColumnType("TEXT");

                    b.HasKey("BenefactorsId", "EndowmentFundsId");

                    b.HasIndex("EndowmentFundsId");

                    b.ToTable("FundModelUserModel");
                });

            modelBuilder.Entity("api.src.Domain.Models.ActivityModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("PaymentRation")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("api.src.Domain.Models.DepartmentModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("api.src.Domain.Models.FundModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Funds");
                });

            modelBuilder.Entity("api.src.Domain.Models.FundSpecializationsModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("FundSpecializations");
                });

            modelBuilder.Entity("api.src.Domain.Models.FundSubgroupsModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FundSpecializationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FundSpecializationId");

                    b.ToTable("FundSubgroups");
                });

            modelBuilder.Entity("api.src.Domain.Models.InvitationLinkModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("OrganizationModelId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ValidBefore")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("OrganizationModelId");

                    b.ToTable("InvitationLinks");
                });

            modelBuilder.Entity("api.src.Domain.Models.OrganizationModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("api.src.Domain.Models.TrainingResultModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("DurationSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("TrainingResults");
                });

            modelBuilder.Entity("api.src.Domain.Models.UserModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("Height")
                        .HasColumnType("REAL");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Patronymic")
                        .HasColumnType("TEXT");

                    b.Property<string>("RestoreCode")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RestoreCodeValidBefore")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .HasColumnType("TEXT");

                    b.Property<bool>("WasPasswordResetRequest")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Weight")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("OrganizationId");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ActivityModelUserModel", b =>
                {
                    b.HasOne("api.src.Domain.Models.ActivityModel", null)
                        .WithMany()
                        .HasForeignKey("SelectedActivitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.src.Domain.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FundModelFundSubgroupsModel", b =>
                {
                    b.HasOne("api.src.Domain.Models.FundSubgroupsModel", null)
                        .WithMany()
                        .HasForeignKey("FundSubgroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.src.Domain.Models.FundModel", null)
                        .WithMany()
                        .HasForeignKey("FundsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FundModelUserModel", b =>
                {
                    b.HasOne("api.src.Domain.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("BenefactorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.src.Domain.Models.FundModel", null)
                        .WithMany()
                        .HasForeignKey("EndowmentFundsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.src.Domain.Models.DepartmentModel", b =>
                {
                    b.HasOne("api.src.Domain.Models.OrganizationModel", "Organization")
                        .WithMany("Departments")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("api.src.Domain.Models.FundSubgroupsModel", b =>
                {
                    b.HasOne("api.src.Domain.Models.FundSpecializationsModel", "FundSpecialization")
                        .WithMany("SpecializationSubgroups")
                        .HasForeignKey("FundSpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FundSpecialization");
                });

            modelBuilder.Entity("api.src.Domain.Models.InvitationLinkModel", b =>
                {
                    b.HasOne("api.src.Domain.Models.DepartmentModel", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.src.Domain.Models.OrganizationModel", null)
                        .WithMany("InvitationLinks")
                        .HasForeignKey("OrganizationModelId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("api.src.Domain.Models.TrainingResultModel", b =>
                {
                    b.HasOne("api.src.Domain.Models.ActivityModel", "Activity")
                        .WithMany("TrainingResults")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.src.Domain.Models.UserModel", "User")
                        .WithMany("TrainingResults")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.src.Domain.Models.UserModel", b =>
                {
                    b.HasOne("api.src.Domain.Models.DepartmentModel", "Department")
                        .WithMany("Workers")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.src.Domain.Models.OrganizationModel", "Organization")
                        .WithMany("Workers")
                        .HasForeignKey("OrganizationId");

                    b.Navigation("Department");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("api.src.Domain.Models.ActivityModel", b =>
                {
                    b.Navigation("TrainingResults");
                });

            modelBuilder.Entity("api.src.Domain.Models.DepartmentModel", b =>
                {
                    b.Navigation("Workers");
                });

            modelBuilder.Entity("api.src.Domain.Models.FundSpecializationsModel", b =>
                {
                    b.Navigation("SpecializationSubgroups");
                });

            modelBuilder.Entity("api.src.Domain.Models.OrganizationModel", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("InvitationLinks");

                    b.Navigation("Workers");
                });

            modelBuilder.Entity("api.src.Domain.Models.UserModel", b =>
                {
                    b.Navigation("TrainingResults");
                });
#pragma warning restore 612, 618
        }
    }
}
